{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Js\\\\react-firebase-chat-app-main\\\\react-firebase-chat-app-main\\\\src\\\\components\\\\Chat.js\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { db, auth } from \"../firebase-config\";\nimport { collection, addDoc, where, serverTimestamp, onSnapshot, query, orderBy, setDoc, doc, updateDoc, deleteDoc } from \"firebase/firestore\";\nimport EmojiPicker from \"emoji-picker-react\";\nimport \"../styles/Chat.css\";\nconst reactionOptions = [\"👍\", \"❤️\", \"😂\", \"😮\", \"😢\"];\nconst notificationSound = new Audio(\"/notification.mp3\"); // Add your own sound file in public folder\nimport { getStorage, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Chat = _ref => {\n  _s();\n  var _auth$currentUser;\n  let {\n    room\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [hoveredMessageId, setHoveredMessageId] = useState(null);\n  const [selectedEmojiMap, setSelectedEmojiMap] = useState({});\n  const [reactionInfoMap, setReactionInfoMap] = useState({});\n  const [isTabActive, setIsTabActive] = useState(true);\n  const [imageFile, setImageFile] = useState(null);\n  const typingRef = collection(db, \"typing\");\n  const messagesRef = collection(db, \"messages\");\n  const typingTimeout = useRef(null);\n  const inputRef = useRef(null);\n  const lastMessageRef = useRef(null);\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      setIsTabActive(!document.hidden);\n    };\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n    return () => {\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    };\n  }, []);\n  useEffect(() => {\n    const queryMessages = query(messagesRef, where(\"room\", \"==\", room), orderBy(\"createdAt\"));\n    const unsubscribe = onSnapshot(queryMessages, snapshot => {\n      const msgs = [];\n      snapshot.docChanges().forEach(change => {\n        if (change.type === \"added\") {\n          const newMsg = change.doc.data();\n          if (newMsg.uid !== auth.currentUser.uid) {\n            notificationSound.play().catch(() => {}); // Try play once so browser trusts it later\n\n            if (!isTabActive) {\n              document.title = `${newMsg.user} sent a message 💬`;\n              setTimeout(() => {\n                document.title = \"React App\";\n              }, 3000);\n            }\n          }\n        }\n      });\n      snapshot.forEach(doc => {\n        msgs.push({\n          ...doc.data(),\n          id: doc.id\n        });\n      });\n      setMessages(msgs);\n    });\n    const typingQuery = query(typingRef, where(\"room\", \"==\", room));\n    const unsubscribeTyping = onSnapshot(typingQuery, snapshot => {\n      const usersTyping = [];\n      snapshot.forEach(doc => {\n        if (doc.id !== auth.currentUser.uid) {\n          usersTyping.push(doc.data().user);\n        }\n      });\n      setTypingUsers(usersTyping);\n    });\n    return () => {\n      unsubscribe();\n      unsubscribeTyping();\n    };\n  }, [room]);\n  useEffect(() => {\n    if (isTabActive) {\n      document.title = \"React App\";\n    }\n  }, [isTabActive]);\n  const handleTyping = async value => {\n    setNewMessage(value);\n    const currentUser = auth.currentUser;\n    if (typingTimeout.current) {\n      clearTimeout(typingTimeout.current);\n    }\n    if (value.trim() !== \"\") {\n      await setDoc(doc(db, \"typing\", currentUser.uid), {\n        user: currentUser.displayName,\n        room,\n        timestamp: serverTimestamp()\n      });\n      typingTimeout.current = setTimeout(async () => {\n        await deleteDoc(doc(db, \"typing\", currentUser.uid));\n      }, 3000);\n    } else {\n      await deleteDoc(doc(db, \"typing\", currentUser.uid));\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (newMessage.trim() === \"\") return;\n    const currentUser = auth.currentUser;\n    await addDoc(messagesRef, {\n      text: newMessage,\n      createdAt: serverTimestamp(),\n      user: currentUser.displayName,\n      photoURL: currentUser.photoURL || \"\",\n      uid: currentUser.uid,\n      room,\n      reactions: {}\n    });\n    await deleteDoc(doc(db, \"typing\", currentUser.uid));\n    setNewMessage(\"\");\n    setShowEmojiPicker(false);\n  };\n  const handleEmojiClick = emojiData => {\n    setNewMessage(prev => prev + emojiData.emoji);\n    inputRef.current.focus();\n  };\n  const getShortName = fullName => {\n    const parts = fullName.trim().split(\" \");\n    return parts.length >= 2 ? parts[parts.length - 1] : fullName;\n  };\n  const handleReaction = async (messageId, emoji) => {\n    var _currentReactions$emo;\n    const currentUser = auth.currentUser;\n    const message = messages.find(msg => msg.id === messageId);\n    const currentReactions = message.reactions || {};\n\n    // Remove user from all emojis first\n    const updatedReactions = {};\n    for (const key in currentReactions) {\n      updatedReactions[key] = currentReactions[key].filter(uid => uid !== currentUser.uid);\n    }\n    const alreadyReactedWith = (_currentReactions$emo = currentReactions[emoji]) === null || _currentReactions$emo === void 0 ? void 0 : _currentReactions$emo.includes(currentUser.uid);\n\n    // Toggle logic\n    if (!alreadyReactedWith) {\n      updatedReactions[emoji] = [...(updatedReactions[emoji] || []), currentUser.uid];\n\n      // Show message only if user added emoji\n      setReactionInfoMap(prev => ({\n        ...prev,\n        [messageId]: {\n          name: currentUser.displayName,\n          uid: currentUser.uid,\n          emoji\n        }\n      }));\n    } else {\n      // Remove reaction info if user unreacted\n      setReactionInfoMap(prev => {\n        const newMap = {\n          ...prev\n        };\n        delete newMap[messageId];\n        return newMap;\n      });\n    }\n    await updateDoc(doc(db, \"messages\", messageId), {\n      reactions: updatedReactions\n    });\n    setSelectedEmojiMap(prev => ({\n      ...prev,\n      [messageId]: alreadyReactedWith ? null : emoji\n    }));\n  };\n  const renderReactions = function () {\n    let reactions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let messageId = arguments.length > 1 ? arguments[1] : undefined;\n    if (hoveredMessageId !== messageId) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reactions\",\n      children: reactionOptions.map(emoji => {\n        var _reactions$emoji, _reactions$emoji2;\n        const count = ((_reactions$emoji = reactions[emoji]) === null || _reactions$emoji === void 0 ? void 0 : _reactions$emoji.length) || 0;\n        const reacted = (_reactions$emoji2 = reactions[emoji]) === null || _reactions$emoji2 === void 0 ? void 0 : _reactions$emoji2.includes(auth.currentUser.uid);\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `reaction-button ${reacted ? \"active\" : \"\"}`,\n          onClick: () => handleReaction(messageId, emoji),\n          children: [emoji, \" \", count > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: count\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 35\n          }, _this)]\n        }, emoji, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 5\n    }, _this);\n  };\n  const getUserShortName = fullName => {\n    const parts = fullName.trim().split(\" \");\n    return parts.length >= 2 ? parts[parts.length - 1] : fullName;\n  };\n  const getReactedNames = reactionUsers => {\n    return reactionUsers.map(uid => {\n      if (uid === auth.currentUser.uid) return \"You\";\n      const user = messages.map(msg => ({\n        uid: msg.uid,\n        user: msg.user\n      })).find(u => u.uid === uid);\n      return user ? getShortName(user.user) : \"Someone\";\n    }).join(\", \");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome to \", room.toUpperCase(), \" room \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"user-name\",\n          children: getShortName(((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.displayName) || \"User\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 50\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        onMouseEnter: () => setHoveredMessageId(message.id),\n        onMouseLeave: () => setHoveredMessageId(null),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: message.photoURL && message.photoURL.startsWith(\"http\") ? message.photoURL : \"https://via.placeholder.com/35\",\n          alt: \"avatar\",\n          className: \"avatar\",\n          onError: e => {\n            e.target.onerror = null;\n            e.target.src = \"https://via.placeholder.com/35\";\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"react-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"user\",\n            children: [getShortName(message.user), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 3\n          }, this), \" \", message.text, renderReactions(message.reactions, message.id), message.reactions && Object.entries(message.reactions).map(_ref2 => {\n            let [emoji, uids] = _ref2;\n            return uids.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"reaction-info\",\n              children: [getReactedNames(uids), \" reacted with \", emoji]\n            }, emoji, true, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 7\n            }, this) : null;\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 12\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this)), typingUsers.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-indicator\",\n        children: [typingUsers.join(\", \"), \" \", typingUsers.length > 1 ? \"are\" : \"is\", \" typing...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"new-message-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: inputRef,\n          type: \"text\",\n          value: newMessage,\n          onChange: e => handleTyping(e.target.value),\n          className: \"new-message-input\",\n          placeholder: \"Type your message here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => setShowEmojiPicker(prev => !prev),\n          className: \"emoji-button\",\n          children: \"\\uD83D\\uDE0A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"emoji-picker\",\n        children: /*#__PURE__*/_jsxDEV(EmojiPicker, {\n          onEmojiClick: handleEmojiClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"l3RZp9l/Y6bPe6zDlurR/ySeHx0=\");\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","db","auth","collection","addDoc","where","serverTimestamp","onSnapshot","query","orderBy","setDoc","doc","updateDoc","deleteDoc","EmojiPicker","reactionOptions","notificationSound","Audio","getStorage","ref","uploadBytes","getDownloadURL","Chat","room","messages","setMessages","newMessage","setNewMessage","typingUsers","setTypingUsers","showEmojiPicker","setShowEmojiPicker","hoveredMessageId","setHoveredMessageId","selectedEmojiMap","setSelectedEmojiMap","reactionInfoMap","setReactionInfoMap","isTabActive","setIsTabActive","imageFile","setImageFile","typingRef","messagesRef","typingTimeout","inputRef","lastMessageRef","handleVisibilityChange","document","hidden","addEventListener","removeEventListener","queryMessages","unsubscribe","snapshot","msgs","docChanges","forEach","change","type","newMsg","data","uid","currentUser","play","catch","title","user","setTimeout","push","id","typingQuery","unsubscribeTyping","usersTyping","handleTyping","value","current","clearTimeout","trim","displayName","timestamp","handleSubmit","event","preventDefault","text","createdAt","photoURL","reactions","handleEmojiClick","emojiData","prev","emoji","focus","getShortName","fullName","parts","split","length","handleReaction","messageId","message","find","msg","currentReactions","updatedReactions","key","filter","alreadyReactedWith","includes","name","newMap","renderReactions","map","count","reacted","getUserShortName","getReactedNames","reactionUsers","u","join","toUpperCase","startsWith","e","target","onerror","src","Object","entries","uids"],"sources":["E:/React Js/react-firebase-chat-app-main/react-firebase-chat-app-main/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { db, auth } from \"../firebase-config\";\nimport {\n  collection,\n  addDoc,\n  where,\n  serverTimestamp,\n  onSnapshot,\n  query,\n  orderBy,\n  setDoc,\n  doc,\n  updateDoc,\n  deleteDoc,\n} from \"firebase/firestore\";\nimport EmojiPicker from \"emoji-picker-react\";\nimport \"../styles/Chat.css\";\nconst reactionOptions = [\"👍\", \"❤️\", \"😂\", \"😮\", \"😢\"];\nconst notificationSound = new Audio(\"/notification.mp3\"); // Add your own sound file in public folder\nimport { getStorage, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\n\n\nexport const Chat = ({ room }) => {\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [hoveredMessageId, setHoveredMessageId] = useState(null);\n  const [selectedEmojiMap, setSelectedEmojiMap] = useState({});\nconst [reactionInfoMap, setReactionInfoMap] = useState({});\nconst [isTabActive, setIsTabActive] = useState(true);\nconst [imageFile, setImageFile] = useState(null);\n\n\n  const typingRef = collection(db, \"typing\");\n  const messagesRef = collection(db, \"messages\");\n  const typingTimeout = useRef(null);\n  const inputRef = useRef(null);\n  const lastMessageRef = useRef(null);\n\nuseEffect(() => {\n  const handleVisibilityChange = () => {\n    setIsTabActive(!document.hidden);\n  };\n\n  document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n\n  return () => {\n    document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n  };\n}, []);\n\n\n  useEffect(() => {\n    const queryMessages = query(\n      messagesRef,\n      where(\"room\", \"==\", room),\n      orderBy(\"createdAt\")\n    );\n\n\n\n\n    const unsubscribe = onSnapshot(queryMessages, (snapshot) => {\n      const msgs = [];\n     snapshot.docChanges().forEach((change) => {\n  if (change.type === \"added\") {\n    const newMsg = change.doc.data();\n    if (newMsg.uid !== auth.currentUser.uid) {\n     notificationSound.play().catch(() => {}); // Try play once so browser trusts it later\n\n      if (!isTabActive) {\n        document.title = `${newMsg.user} sent a message 💬`;\n\n        setTimeout(() => {\n          document.title = \"React App\";\n        }, 3000);\n      }\n    }\n  }\n});\n\n\n      snapshot.forEach((doc) => {\n        msgs.push({ ...doc.data(), id: doc.id });\n      });\n\n      setMessages(msgs);\n    });\n\n    const typingQuery = query(typingRef, where(\"room\", \"==\", room));\n    const unsubscribeTyping = onSnapshot(typingQuery, (snapshot) => {\n      const usersTyping = [];\n      snapshot.forEach((doc) => {\n        if (doc.id !== auth.currentUser.uid) {\n          usersTyping.push(doc.data().user);\n        }\n      });\n      setTypingUsers(usersTyping);\n    });\n\n    return () => {\n      unsubscribe();\n      unsubscribeTyping();\n    };\n  }, [room]);\n\n  useEffect(() => {\n  if (isTabActive) {\n    document.title = \"React App\";\n  }\n}, [isTabActive]);\n\n  const handleTyping = async (value) => {\n    setNewMessage(value);\n    const currentUser = auth.currentUser;\n\n    if (typingTimeout.current) {\n      clearTimeout(typingTimeout.current);\n    }\n\n    if (value.trim() !== \"\") {\n      await setDoc(doc(db, \"typing\", currentUser.uid), {\n        user: currentUser.displayName,\n        room,\n        timestamp: serverTimestamp(),\n      });\n\n      typingTimeout.current = setTimeout(async () => {\n        await deleteDoc(doc(db, \"typing\", currentUser.uid));\n      }, 3000);\n    } else {\n      await deleteDoc(doc(db, \"typing\", currentUser.uid));\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    if (newMessage.trim() === \"\") return;\n\n    const currentUser = auth.currentUser;\n\n    await addDoc(messagesRef, {\n      text: newMessage,\n      createdAt: serverTimestamp(),\n      user: currentUser.displayName,\n      photoURL: currentUser.photoURL || \"\",\n      uid: currentUser.uid,\n      room,\n      reactions: {},\n    });\n\n    await deleteDoc(doc(db, \"typing\", currentUser.uid));\n    setNewMessage(\"\");\n    setShowEmojiPicker(false);\n  };\n\n  const handleEmojiClick = (emojiData) => {\n    setNewMessage((prev) => prev + emojiData.emoji);\n    inputRef.current.focus();\n  };\n\n  const getShortName = (fullName) => {\n    const parts = fullName.trim().split(\" \");\n    return parts.length >= 2 ? parts[parts.length - 1] : fullName;\n  };\n\nconst handleReaction = async (messageId, emoji) => {\n  const currentUser = auth.currentUser;\n  const message = messages.find((msg) => msg.id === messageId);\n  const currentReactions = message.reactions || {};\n\n  // Remove user from all emojis first\n  const updatedReactions = {};\n  for (const key in currentReactions) {\n    updatedReactions[key] = currentReactions[key].filter(\n      (uid) => uid !== currentUser.uid\n    );\n  }\n\n  const alreadyReactedWith = currentReactions[emoji]?.includes(currentUser.uid);\n\n  // Toggle logic\n  if (!alreadyReactedWith) {\n    updatedReactions[emoji] = [...(updatedReactions[emoji] || []), currentUser.uid];\n\n    // Show message only if user added emoji\n   setReactionInfoMap((prev) => ({\n  ...prev,\n  [messageId]: {\n    name: currentUser.displayName,\n    uid: currentUser.uid,\n    emoji,\n  },\n}));\n\n  } else {\n    // Remove reaction info if user unreacted\n    setReactionInfoMap((prev) => {\n      const newMap = { ...prev };\n      delete newMap[messageId];\n      return newMap;\n    });\n  }\n\n  await updateDoc(doc(db, \"messages\", messageId), {\n    reactions: updatedReactions,\n  });\n\n  setSelectedEmojiMap((prev) => ({\n    ...prev,\n    [messageId]: alreadyReactedWith ? null : emoji,\n  }));\n};\n\n\n\n\nconst renderReactions = (reactions = {}, messageId) => {\n  if (hoveredMessageId !== messageId) return null;\n\n  return (\n    <div className=\"reactions\">\n      {reactionOptions.map((emoji) => {\n        const count = reactions[emoji]?.length || 0;\n        const reacted = reactions[emoji]?.includes(auth.currentUser.uid);\n\n        return (\n          <button\n            key={emoji}\n            className={`reaction-button ${reacted ? \"active\" : \"\"}`}\n            onClick={() => handleReaction(messageId, emoji)}\n          >\n            {emoji} {count > 0 && <span>{count}</span>}\n          </button>\n        );\n      })}\n    </div>\n  );\n};\n\nconst getUserShortName = (fullName) => {\n  const parts = fullName.trim().split(\" \");\n  return parts.length >= 2 ? parts[parts.length - 1] : fullName;\n};\n\nconst getReactedNames = (reactionUsers) => {\n  return reactionUsers\n    .map((uid) => {\n      if (uid === auth.currentUser.uid) return \"You\";\n\n      const user = messages\n        .map((msg) => ({\n          uid: msg.uid,\n          user: msg.user,\n        }))\n        .find((u) => u.uid === uid);\n\n      return user ? getShortName(user.user) : \"Someone\";\n    })\n    .join(\", \");\n};\n\n  return (\n    <div className=\"chat-app\">\n      <div className=\"header\">\n        <h1>Welcome to {room.toUpperCase()} room <span className=\"user-name\">{getShortName(auth.currentUser?.displayName || \"User\")}</span></h1>\n      </div>\n\n      <div className=\"messages\">\n        {messages.map((message) => (\n          <div\n            key={message.id}\n            className=\"message\"\n            onMouseEnter={() => setHoveredMessageId(message.id)}\n            onMouseLeave={() => setHoveredMessageId(null)}\n          >\n            <img\n              src={\n                message.photoURL && message.photoURL.startsWith(\"http\")\n                  ? message.photoURL\n                  : \"https://via.placeholder.com/35\"\n              }\n              alt=\"avatar\"\n              className=\"avatar\"\n              onError={(e) => {\n                e.target.onerror = null;\n                e.target.src = \"https://via.placeholder.com/35\";\n              }}\n            />\n           <div className=\"react-container\">\n  <span className=\"user\">{getShortName(message.user)}:</span>{\" \"}\n  {message.text}\n  {renderReactions(message.reactions, message.id)}\n\n  {/* Show who reacted and with what */}\n  \n {message.reactions &&\n  Object.entries(message.reactions).map(([emoji, uids]) =>\n    uids.length > 0 ? (\n      <div className=\"reaction-info\" key={emoji}>\n        {getReactedNames(uids)} reacted with {emoji}\n      </div>\n    ) : null\n  )}\n\n\n</div>\n\n          </div>\n        ))}\n\n        {typingUsers.length > 0 && (\n          <div className=\"typing-indicator\">\n            {typingUsers.join(\", \")} {typingUsers.length > 1 ? \"are\" : \"is\"} typing...\n          </div>\n        )}\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"new-message-form\">\n        <div className=\"input-area\">\n          <input\n            ref={inputRef}\n            type=\"text\"\n            value={newMessage}\n            onChange={(e) => handleTyping(e.target.value)}\n            className=\"new-message-input\"\n            placeholder=\"Type your message here...\"\n          />\n          <button\n            type=\"button\"\n            onClick={() => setShowEmojiPicker((prev) => !prev)}\n            className=\"emoji-button\"\n          >\n            😊\n          </button>\n        </div>\n\n        {showEmojiPicker && (\n          <div className=\"emoji-picker\">\n            <EmojiPicker onEmojiClick={handleEmojiClick} />\n          </div>\n        )}\n\n        <button type=\"submit\" className=\"send-button\">\n          Send\n        </button>\n      </form>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}