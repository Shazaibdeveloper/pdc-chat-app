{"ast":null,"code":"// src/utils/asArray.ts\nfunction asArray(v) {\n  return [].concat(v);\n}\n\n// src/utils/is.ts\nfunction isPsuedoSelector(selector) {\n  return selector.startsWith(\":\");\n}\nfunction isStyleCondition(selector) {\n  return isString(selector) && (selector === \"*\" || selector.length > 1 && \":>~.+*\".includes(selector.slice(0, 1)) || isImmediatePostcondition(selector));\n}\nfunction isValidProperty(property, value) {\n  return (isString(value) || typeof value === \"number\") && !isCssVariables(property) && !isPsuedoSelector(property) && !isMediaQuery(property);\n}\nfunction isMediaQuery(selector) {\n  return selector.startsWith(\"@media\");\n}\nfunction isDirectClass(selector) {\n  return selector === \".\";\n}\nfunction isCssVariables(selector) {\n  return selector === \"--\";\n}\nfunction isString(value) {\n  return value + \"\" === value;\n}\nfunction isImmediatePostcondition(value) {\n  return isString(value) && (value.startsWith(\"&\") || isPsuedoSelector(value));\n}\n\n// src/utils/joinTruthy.ts\nfunction joinTruthy(arr) {\n  let delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  return arr.filter(Boolean).join(delimiter);\n}\n\n// src/utils/stableHash.ts\nfunction stableHash(prefix, seed) {\n  let hash = 0;\n  if (seed.length === 0) return hash.toString();\n  for (let i = 0; i < seed.length; i++) {\n    const char = seed.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash;\n  }\n  return `${prefix ?? \"cl\"}_${hash.toString(36)}`;\n}\n\n// src/utils/stringManipulators.ts\nfunction handlePropertyValue(property, value) {\n  if (property === \"content\") {\n    return `\"${value}\"`;\n  }\n  return value;\n}\nfunction camelCaseToDash(str) {\n  return str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nfunction joinedProperty(property, value) {\n  return `${property}:${value}`;\n}\nfunction toClass(str) {\n  return str ? `.${str}` : \"\";\n}\nfunction appendString(base, line) {\n  return base ? `${base}\n${line}` : line;\n}\n\n// src/Rule.ts\nvar Rule = class _Rule {\n  constructor(sheet, property, value, selector) {\n    this.sheet = sheet;\n    this.property = property;\n    this.value = value;\n    this.selector = selector;\n    this.property = property;\n    this.value = value;\n    this.joined = joinedProperty(property, value);\n    const joinedConditions = this.selector.preconditions.concat(this.selector.postconditions);\n    this.hash = this.selector.hasConditions ? this.selector.scopeClassName : stableHash(this.sheet.name, this.joined);\n    this.key = joinTruthy([this.joined, joinedConditions, this.hash]);\n  }\n  toString() {\n    let selectors = mergeSelectors(this.selector.preconditions, {\n      right: this.hash\n    });\n    selectors = mergeSelectors(this.selector.postconditions, {\n      left: selectors\n    });\n    return `${selectors} {${_Rule.genRule(this.property, this.value)}}`;\n  }\n  static genRule(property, value) {\n    const transformedProperty = camelCaseToDash(property);\n    return joinedProperty(transformedProperty, handlePropertyValue(property, value)) + \";\";\n  }\n};\nfunction mergeSelectors(selectors) {\n  let {\n    left = \"\",\n    right = \"\"\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const output = selectors.reduce((selectors2, current) => {\n    if (isPsuedoSelector(current)) {\n      return selectors2 + current;\n    }\n    if (isImmediatePostcondition(current)) {\n      return selectors2 + current.slice(1);\n    }\n    return joinTruthy([selectors2, current], \" \");\n  }, left);\n  return joinTruthy([output, toClass(right)], \" \");\n}\nvar Selector = class _Selector {\n  constructor(sheet) {\n    let scopeName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let {\n      preconditions,\n      postconditions\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.sheet = sheet;\n    this.preconditions = [];\n    this.scopeClassName = null;\n    this.scopeName = null;\n    this.postconditions = [];\n    this.preconditions = preconditions ? asArray(preconditions) : [];\n    this.postconditions = postconditions ? asArray(postconditions) : [];\n    this.setScope(scopeName);\n  }\n  setScope(scopeName) {\n    if (!scopeName) {\n      return this;\n    }\n    if (!this.scopeClassName) {\n      this.scopeName = scopeName;\n      this.scopeClassName = stableHash(this.sheet.name,\n      // adding the count guarantees uniqueness across style.create calls\n      scopeName + this.sheet.count);\n    }\n    return this;\n  }\n  get hasConditions() {\n    return this.preconditions.length > 0 || this.postconditions.length > 0;\n  }\n  addScope(scopeName) {\n    return new _Selector(this.sheet, scopeName, {\n      preconditions: this.preconditions,\n      postconditions: this.postconditions\n    });\n  }\n  addPrecondition(precondition) {\n    return new _Selector(this.sheet, this.scopeClassName, {\n      postconditions: this.postconditions,\n      preconditions: this.preconditions.concat(precondition)\n    });\n  }\n  addPostcondition(postcondition) {\n    return new _Selector(this.sheet, this.scopeClassName, {\n      preconditions: this.preconditions,\n      postconditions: this.postconditions.concat(postcondition)\n    });\n  }\n  createRule(property, value) {\n    return new Rule(this.sheet, property, value, this);\n  }\n};\n\n// src/Sheet.ts\nvar Sheet = class {\n  constructor(name, rootNode) {\n    this.name = name;\n    this.rootNode = rootNode;\n    // Hash->css\n    this.storedStyles = {};\n    // styles->hash\n    this.storedClasses = {};\n    this.style = \"\";\n    this.count = 0;\n    this.id = `flairup-${name}`;\n    this.styleTag = this.createStyleTag();\n  }\n  getStyle() {\n    return this.style;\n  }\n  append(css) {\n    this.style = appendString(this.style, css);\n  }\n  apply() {\n    this.count++;\n    if (!this.styleTag) {\n      return;\n    }\n    this.styleTag.innerHTML = this.style;\n  }\n  isApplied() {\n    return !!this.styleTag;\n  }\n  createStyleTag() {\n    if (typeof document === \"undefined\" || this.isApplied() ||\n    // Explicitly disallow mounting to the DOM\n    this.rootNode === null) {\n      return this.styleTag;\n    }\n    const styleTag = document.createElement(\"style\");\n    styleTag.type = \"text/css\";\n    styleTag.id = this.id;\n    (this.rootNode ?? document.head).appendChild(styleTag);\n    return styleTag;\n  }\n  addRule(rule) {\n    const storedClass = this.storedClasses[rule.key];\n    if (isString(storedClass)) {\n      return storedClass;\n    }\n    this.storedClasses[rule.key] = rule.hash;\n    this.storedStyles[rule.hash] = [rule.property, rule.value];\n    this.append(rule.toString());\n    return rule.hash;\n  }\n};\n\n// src/utils/forIn.ts\nfunction forIn(obj, fn) {\n  for (const key in obj) {\n    fn(key.trim(), obj[key]);\n  }\n}\n\n// src/cx.ts\nfunction cx() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  const classes = args.reduce((classes2, arg) => {\n    if (arg instanceof Set) {\n      classes2.push(...arg);\n    } else if (typeof arg === \"string\") {\n      classes2.push(arg);\n    } else if (Array.isArray(arg)) {\n      classes2.push(cx(...arg));\n    } else if (typeof arg === \"object\") {\n      Object.entries(arg).forEach(_ref => {\n        let [key, value] = _ref;\n        if (value) {\n          classes2.push(key);\n        }\n      });\n    }\n    return classes2;\n  }, []);\n  return joinTruthy(classes, \" \").trim();\n}\n\n// src/index.ts\nfunction createSheet(name, rootNode) {\n  const sheet = new Sheet(name, rootNode);\n  return {\n    create,\n    getStyle: sheet.getStyle.bind(sheet),\n    isApplied: sheet.isApplied.bind(sheet)\n  };\n  function create(styles) {\n    const scopedStyles = {};\n    iteratePreconditions(sheet, styles, new Selector(sheet)).forEach(_ref2 => {\n      let [scopeName, styles2, selector] = _ref2;\n      iterateStyles(sheet, styles2, selector).forEach(className => {\n        addScopedStyle(scopeName, className);\n      });\n    });\n    sheet.apply();\n    return scopedStyles;\n    function addScopedStyle(name2, className) {\n      scopedStyles[name2] = scopedStyles[name2] ?? /* @__PURE__ */new Set();\n      scopedStyles[name2].add(className);\n    }\n  }\n}\nfunction iteratePreconditions(sheet, styles, selector) {\n  const output = [];\n  forIn(styles, (key, value) => {\n    if (isStyleCondition(key)) {\n      return iteratePreconditions(sheet, value, selector.addPrecondition(key)).forEach(item => output.push(item));\n    }\n    output.push([key, styles[key], selector.addScope(key)]);\n  });\n  return output;\n}\nfunction iterateStyles(sheet, styles, selector) {\n  const output = /* @__PURE__ */new Set();\n  forIn(styles, (property, value) => {\n    let res = [];\n    if (isStyleCondition(property)) {\n      res = iterateStyles(sheet, value, selector.addPostcondition(property));\n    } else if (isDirectClass(property)) {\n      res = asArray(value);\n    } else if (isMediaQuery(property)) {\n      res = handleMediaQuery(sheet, value, property, selector);\n    } else if (isCssVariables(property)) {\n      res = cssVariablesBlock(sheet, value, selector);\n    } else if (isValidProperty(property, value)) {\n      const rule = selector.createRule(property, value);\n      sheet.addRule(rule);\n      output.add(rule.hash);\n    }\n    return addEachClass(res, output);\n  });\n  return output;\n}\nfunction addEachClass(list, to) {\n  list.forEach(className => to.add(className));\n  return to;\n}\nfunction cssVariablesBlock(sheet, styles, selector) {\n  const classes = /* @__PURE__ */new Set();\n  const chunkRows = [];\n  forIn(styles, (property, value) => {\n    if (isValidProperty(property, value)) {\n      chunkRows.push(Rule.genRule(property, value));\n      return;\n    }\n    const res = iterateStyles(sheet, value ?? {}, selector);\n    addEachClass(res, classes);\n  });\n  if (!selector.scopeClassName) {\n    return classes;\n  }\n  if (chunkRows.length) {\n    const output = chunkRows.join(\" \");\n    sheet.append(`${mergeSelectors(selector.preconditions, {\n      right: selector.scopeClassName\n    })} {${output}}`);\n  }\n  classes.add(selector.scopeClassName);\n  return classes;\n}\nfunction handleMediaQuery(sheet, styles, mediaQuery, selector) {\n  sheet.append(mediaQuery + \" {\");\n  const output = iterateStyles(sheet, styles, selector);\n  sheet.append(\"}\");\n  return output;\n}\nexport { createSheet, cx };","map":{"version":3,"mappings":"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","names":["asArray","v","concat","isPsuedoSelector","selector","startsWith","isStyleCondition","isString","length","includes","slice","isImmediatePostcondition","isValidProperty","property","value","isCssVariables","isMediaQuery","isDirectClass","joinTruthy","arr","delimiter","filter","Boolean","join","stableHash","prefix","seed","hash","toString","i","char","charCodeAt","handlePropertyValue","camelCaseToDash","str","replace","toLowerCase","joinedProperty","toClass","appendString","base","line","Rule","_Rule","constructor","sheet","joined","joinedConditions","preconditions","postconditions","hasConditions","scopeClassName","name","key","selectors","mergeSelectors","right","left","genRule","transformedProperty","output","reduce","current","Selector","_Selector","scopeName","setScope","count","addScope","addPrecondition","precondition","addPostcondition","postcondition","createRule","Sheet","rootNode","storedStyles","storedClasses","style","id","styleTag","createStyleTag","getStyle","append","css","apply","innerHTML","isApplied","document","createElement","type","head","appendChild","addRule","rule","storedClass","forIn","obj","fn","trim","cx","args","classes","arg","Set","push","Array","isArray","Object","entries","forEach","createSheet","create","bind","styles","scopedStyles","iteratePreconditions","iterateStyles","className","addScopedStyle","add","item","res","handleMediaQuery","cssVariablesBlock","addEachClass","list","to","chunkRows","mediaQuery"],"sources":["E:\\React Js\\react-firebase-chat-app-main\\react-firebase-chat-app-main\\node_modules\\flairup\\src\\utils\\asArray.ts","E:\\React Js\\react-firebase-chat-app-main\\react-firebase-chat-app-main\\node_modules\\flairup\\src\\utils\\is.ts","E:\\React Js\\react-firebase-chat-app-main\\react-firebase-chat-app-main\\node_modules\\flairup\\src\\utils\\joinTruthy.ts","E:\\React Js\\react-firebase-chat-app-main\\react-firebase-chat-app-main\\node_modules\\flairup\\src\\utils\\stableHash.ts","E:\\React Js\\react-firebase-chat-app-main\\react-firebase-chat-app-main\\node_modules\\flairup\\src\\utils\\stringManipulators.ts","E:\\React Js\\react-firebase-chat-app-main\\react-firebase-chat-app-main\\node_modules\\flairup\\src\\Rule.ts","E:\\React Js\\react-firebase-chat-app-main\\react-firebase-chat-app-main\\node_modules\\flairup\\src\\Sheet.ts","E:\\React Js\\react-firebase-chat-app-main\\react-firebase-chat-app-main\\node_modules\\flairup\\src\\utils\\forIn.ts","E:\\React Js\\react-firebase-chat-app-main\\react-firebase-chat-app-main\\node_modules\\flairup\\src\\cx.ts","E:\\React Js\\react-firebase-chat-app-main\\react-firebase-chat-app-main\\node_modules\\flairup\\src\\index.ts"],"sourcesContent":["export function asArray<T>(v: T | T[]): T[] {\n  return [].concat(v as unknown as []);\n}\n","import { ClassName } from '../types.js';\n\nexport function isPsuedoSelector(selector: string): boolean {\n  return selector.startsWith(':');\n}\n\nexport function isStyleCondition(selector: string): boolean {\n  return (\n    isString(selector) &&\n    (selector === '*' ||\n      (selector.length > 1 && ':>~.+*'.includes(selector.slice(0, 1))) ||\n      isImmediatePostcondition(selector))\n  );\n}\n\nexport function isValidProperty(\n  property: string,\n  value: unknown,\n): value is string {\n  return (\n    (isString(value) || typeof value === 'number') &&\n    !isCssVariables(property) &&\n    !isPsuedoSelector(property) &&\n    !isMediaQuery(property)\n  );\n}\n\nexport function isMediaQuery(selector: string): boolean {\n  return selector.startsWith('@media');\n}\n\nexport function isDirectClass(selector: string): boolean {\n  return selector === '.';\n}\n\nexport function isCssVariables(selector: string): boolean {\n  return selector === '--';\n}\n\nexport function isString(value: unknown): value is string {\n  return value + '' === value;\n}\n\nexport function isClassName(value: unknown): value is ClassName {\n  return isString(value) && value.length > 1 && value.startsWith('.');\n}\n\nexport function isImmediatePostcondition(\n  value: unknown,\n): value is `&${string}` {\n  return isString(value) && (value.startsWith('&') || isPsuedoSelector(value));\n}\n","export function joinTruthy(arr: unknown[], delimiter: string = ''): string {\n  return arr.filter(Boolean).join(delimiter);\n}\n","// Stable hash function.\nexport function stableHash(prefix: string, seed: string): string {\n  let hash = 0;\n  if (seed.length === 0) return hash.toString();\n  for (let i = 0; i < seed.length; i++) {\n    const char = seed.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return `${prefix ?? 'cl'}_${hash.toString(36)}`;\n}\n","// Some properties need special handling\nexport function handlePropertyValue(property: string, value: string): string {\n  if (property === 'content') {\n    return `\"${value}\"`;\n  }\n\n  return value;\n}\n\nexport function camelCaseToDash(str: string): string {\n  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n\nexport function joinedProperty(property: string, value: string): string {\n  return `${property}:${value}`;\n}\n\nexport function toClass(str: string): string {\n  return str ? `.${str}` : '';\n}\n\nexport function appendString(base: string, line: string): string {\n  return base ? `${base}\\n${line}` : line;\n}\n","import { Sheet } from './Sheet';\nimport { asArray } from './utils/asArray';\nimport { isImmediatePostcondition, isPsuedoSelector } from './utils/is';\nimport { joinTruthy } from './utils/joinTruthy';\nimport { stableHash } from './utils/stableHash';\nimport {\n  camelCaseToDash,\n  handlePropertyValue,\n  joinedProperty,\n  toClass,\n} from './utils/stringManipulators';\n\nexport class Rule {\n  public hash: string;\n  public joined: string;\n  public key: string;\n\n  constructor(\n    private sheet: Sheet,\n    public property: string,\n    public value: string,\n    private selector: Selector,\n  ) {\n    this.property = property;\n    this.value = value;\n    this.joined = joinedProperty(property, value);\n    const joinedConditions = this.selector.preconditions.concat(\n      this.selector.postconditions,\n    );\n    this.hash = this.selector.hasConditions\n      ? (this.selector.scopeClassName as string)\n      : stableHash(this.sheet.name, this.joined);\n    this.key = joinTruthy([this.joined, joinedConditions, this.hash]);\n  }\n\n  public toString(): string {\n    let selectors = mergeSelectors(this.selector.preconditions, {\n      right: this.hash,\n    });\n\n    selectors = mergeSelectors(this.selector.postconditions, {\n      left: selectors,\n    });\n\n    return `${selectors} {${Rule.genRule(this.property, this.value)}}`;\n  }\n\n  static genRule(property: string, value: string): string {\n    const transformedProperty = camelCaseToDash(property);\n    return (\n      joinedProperty(\n        transformedProperty,\n        handlePropertyValue(property, value),\n      ) + ';'\n    );\n  }\n}\n\nexport function mergeSelectors(\n  selectors: string[],\n  { left = '', right = '' }: { left?: string; right?: string } = {},\n): string {\n  const output = selectors.reduce((selectors, current) => {\n    if (isPsuedoSelector(current)) {\n      return selectors + current;\n    }\n\n    if (isImmediatePostcondition(current)) {\n      return selectors + current.slice(1);\n    }\n\n    return joinTruthy([selectors, current], ' ');\n\n    // selector then postcondition\n  }, left);\n\n  // preconditions, then selector\n  return joinTruthy([output, toClass(right)], ' ');\n}\n\nexport class Selector {\n  public preconditions: string[] = [];\n  public scopeClassName: string | null = null;\n  public scopeName: string | null = null;\n  public postconditions: string[] = [];\n\n  constructor(\n    private sheet: Sheet,\n    scopeName: string | null = null,\n    {\n      preconditions,\n      postconditions,\n    }: {\n      preconditions?: string[] | string | undefined;\n      postconditions?: string[] | string | undefined;\n    } = {},\n  ) {\n    this.preconditions = preconditions ? asArray(preconditions) : [];\n    this.postconditions = postconditions ? asArray(postconditions) : [];\n    this.setScope(scopeName);\n  }\n\n  private setScope(scopeName: string | null): Selector {\n    if (!scopeName) {\n      return this;\n    }\n\n    if (!this.scopeClassName) {\n      this.scopeName = scopeName;\n      this.scopeClassName = stableHash(\n        this.sheet.name,\n        // adding the count guarantees uniqueness across style.create calls\n        scopeName + this.sheet.count,\n      );\n    }\n\n    return this;\n  }\n\n  get hasConditions(): boolean {\n    return this.preconditions.length > 0 || this.postconditions.length > 0;\n  }\n\n  addScope(scopeName: string): Selector {\n    return new Selector(this.sheet, scopeName, {\n      preconditions: this.preconditions,\n      postconditions: this.postconditions,\n    });\n  }\n\n  addPrecondition(precondition: string): Selector {\n    return new Selector(this.sheet, this.scopeClassName, {\n      postconditions: this.postconditions,\n      preconditions: this.preconditions.concat(precondition),\n    });\n  }\n\n  addPostcondition(postcondition: string): Selector {\n    return new Selector(this.sheet, this.scopeClassName, {\n      preconditions: this.preconditions,\n      postconditions: this.postconditions.concat(postcondition),\n    });\n  }\n\n  createRule(property: string, value: string): Rule {\n    return new Rule(this.sheet, property, value, this);\n  }\n}\n","import { Rule } from './Rule.js';\nimport { StoredStyles } from './types.js';\nimport { isString } from './utils/is.js';\nimport { appendString } from './utils/stringManipulators.js';\n\nexport class Sheet {\n  private styleTag: HTMLStyleElement | undefined;\n\n  // Hash->css\n  private storedStyles: StoredStyles = {};\n\n  // styles->hash\n  private storedClasses: Record<string, string> = {};\n  private style: string = '';\n  public count = 0;\n  public id: string;\n\n  constructor(\n    public name: string,\n    private rootNode?: HTMLElement | null,\n  ) {\n    this.id = `flairup-${name}`;\n\n    this.styleTag = this.createStyleTag();\n  }\n\n  getStyle(): string {\n    return this.style;\n  }\n\n  append(css: string): void {\n    this.style = appendString(this.style, css);\n  }\n\n  apply(): void {\n    this.count++;\n\n    if (!this.styleTag) {\n      return;\n    }\n\n    this.styleTag.innerHTML = this.style;\n  }\n\n  isApplied(): boolean {\n    return !!this.styleTag;\n  }\n\n  createStyleTag(): HTMLStyleElement | undefined {\n    // check that we're in the browser and have access to the DOM\n    if (\n      typeof document === 'undefined' ||\n      this.isApplied() ||\n      // Explicitly disallow mounting to the DOM\n      this.rootNode === null\n    ) {\n      return this.styleTag;\n    }\n\n    const styleTag = document.createElement('style');\n    styleTag.type = 'text/css';\n    styleTag.id = this.id;\n    (this.rootNode ?? document.head).appendChild(styleTag);\n    return styleTag;\n  }\n\n  addRule(rule: Rule): string {\n    const storedClass = this.storedClasses[rule.key];\n\n    if (isString(storedClass)) {\n      return storedClass;\n    }\n\n    this.storedClasses[rule.key] = rule.hash;\n    this.storedStyles[rule.hash] = [rule.property, rule.value];\n\n    this.append(rule.toString());\n    return rule.hash;\n  }\n}\n","export function forIn<O extends Record<string, unknown>>(\n  obj: O,\n  fn: (key: string, value: O[string]) => void,\n): void {\n  for (const key in obj) {\n    fn(key.trim(), obj[key]);\n  }\n}\n","import { joinTruthy } from './utils/joinTruthy';\n\nexport function cx(...args: unknown[]): string {\n  const classes = args.reduce((classes: string[], arg) => {\n    if (arg instanceof Set) {\n      classes.push(...arg);\n    } else if (typeof arg === 'string') {\n      classes.push(arg);\n    } else if (Array.isArray(arg)) {\n      classes.push(cx(...arg));\n    } else if (typeof arg === 'object') {\n      // @ts-expect-error - it is a string\n      Object.entries(arg).forEach(([key, value]) => {\n        if (value) {\n          classes.push(key);\n        }\n      });\n    }\n\n    return classes;\n  }, [] as string[]);\n\n  return joinTruthy(classes, ' ').trim();\n}\n","import { Rule, Selector, mergeSelectors } from './Rule.js';\nimport { Sheet } from './Sheet.js';\nimport {\n  CSSVariablesObject,\n  ClassSet,\n  CreateSheetInput,\n  DirectClass,\n  ScopedStyles,\n  Styles,\n  createSheetReturn,\n} from './types.js';\nimport { asArray } from './utils/asArray.js';\nimport { forIn } from './utils/forIn.js';\nimport {\n  isCssVariables,\n  isDirectClass,\n  isMediaQuery,\n  isStyleCondition,\n  isValidProperty,\n} from './utils/is.js';\n\nexport { cx } from './cx.js';\n\nexport type { CreateSheetInput, Styles };\n\nexport function createSheet(\n  name: string,\n  rootNode?: HTMLElement | null,\n): createSheetReturn {\n  const sheet = new Sheet(name, rootNode);\n\n  return {\n    create,\n    getStyle: sheet.getStyle.bind(sheet),\n    isApplied: sheet.isApplied.bind(sheet),\n  };\n\n  function create<K extends string>(styles: CreateSheetInput<K>) {\n    const scopedStyles: ScopedStyles<K> = {} as ScopedStyles<K>;\n\n    iteratePreconditions(sheet, styles, new Selector(sheet)).forEach(\n      ([scopeName, styles, selector]) => {\n        iterateStyles(sheet, styles as Styles, selector).forEach(\n          (className) => {\n            addScopedStyle(scopeName as K, className);\n          },\n        );\n      },\n    );\n\n    // Commit the styles to the sheet.\n    // Done only once per create call.\n    // This way we do not update the DOM on every style.\n    sheet.apply();\n\n    return scopedStyles;\n\n    function addScopedStyle(name: K, className: string) {\n      scopedStyles[name as keyof ScopedStyles<K>] =\n        scopedStyles[name as keyof ScopedStyles<K>] ?? new Set<string>();\n      scopedStyles[name as keyof ScopedStyles<K>].add(className);\n    }\n  }\n}\n\n// This one plucks out all of the preconditions\n// and creates selector objects from them\nfunction iteratePreconditions(\n  sheet: Sheet,\n  styles: Styles,\n  selector: Selector,\n) {\n  const output: Array<[string, Styles, Selector]> = [];\n\n  forIn(styles, (key: string, value) => {\n    if (isStyleCondition(key)) {\n      return iteratePreconditions(\n        sheet,\n        value as Styles,\n        selector.addPrecondition(key),\n      ).forEach((item) => output.push(item));\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore - this is a valid case\n    output.push([key, styles[key], selector.addScope(key)]);\n  });\n\n  return output;\n}\n\nfunction iterateStyles(\n  sheet: Sheet,\n  styles: Styles,\n  selector: Selector,\n): ClassSet {\n  const output: ClassSet = new Set<string>();\n  // eslint-disable-next-line max-statements\n  forIn(styles, (property, value) => {\n    let res: string[] | Set<string> = [];\n\n    // Postconditions\n    if (isStyleCondition(property)) {\n      res = iterateStyles(\n        sheet,\n        value as Styles,\n        selector.addPostcondition(property),\n      );\n      // Direct classes: \".\": \"className\"\n    } else if (isDirectClass(property)) {\n      res = asArray(value as DirectClass);\n    } else if (isMediaQuery(property)) {\n      res = handleMediaQuery(sheet, value as Styles, property, selector);\n\n      // \"--\": { \"--variable\": \"value\" }\n    } else if (isCssVariables(property)) {\n      res = cssVariablesBlock(sheet, value as CSSVariablesObject, selector);\n\n      // \"property\": \"value\"\n    } else if (isValidProperty(property, value)) {\n      const rule = selector.createRule(property, value);\n      sheet.addRule(rule);\n      output.add(rule.hash);\n    }\n\n    return addEachClass(res, output);\n  });\n\n  return output;\n}\n\nfunction addEachClass(list: string[] | Set<string>, to: Set<string>) {\n  list.forEach((className) => to.add(className));\n  return to;\n}\n\n// eslint-disable-next-line max-statements\nfunction cssVariablesBlock(\n  sheet: Sheet,\n  styles: CSSVariablesObject,\n  selector: Selector,\n) {\n  const classes: ClassSet = new Set<string>();\n\n  const chunkRows: string[] = [];\n  forIn(styles, (property: string, value) => {\n    if (isValidProperty(property, value)) {\n      chunkRows.push(Rule.genRule(property, value));\n      return;\n    }\n    const res = iterateStyles(sheet, value ?? {}, selector);\n    addEachClass(res, classes);\n  });\n\n  if (!selector.scopeClassName) {\n    return classes;\n  }\n\n  if (chunkRows.length) {\n    const output = chunkRows.join(' ');\n    sheet.append(\n      `${mergeSelectors(selector.preconditions, {\n        right: selector.scopeClassName,\n      })} {${output}}`,\n    );\n  }\n\n  classes.add(selector.scopeClassName);\n  return classes;\n}\n\nfunction handleMediaQuery(\n  sheet: Sheet,\n  styles: Styles,\n  mediaQuery: string,\n  selector: Selector,\n) {\n  sheet.append(mediaQuery + ' {');\n\n  // iterateStyles will internally append each rule to the sheet\n  // as needed. All we have to do is just open the block and close it after.\n  const output = iterateStyles(sheet, styles, selector);\n\n  sheet.append('}');\n\n  return output;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}